import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class Rivnianua {
    public List<Double> solve(List<Double> coefficients) {
        List<Double> rishennia = new ArrayList<>();
        return rishennia;
    }
}

class LinearRivnianua extends Rivnianua {
    @Override
    public List<Double> solve(List<Double> coefficients) {
        List<Double> rishennia = new ArrayList<>();
        double b = coefficients.get(0);
        double c = coefficients.get(1);

        if (b != 0) {
            double solution = -c / b;
            rishennia.add(solution);
        }

        return rishennia;
    }
}

class QuadraticRivnianua extends Rivnianua {
    @Override
    public List<Double> solve(List<Double> coefficients) {
        List<Double> rishennia = new ArrayList<>();
        double a = coefficients.get(0);
        double b = coefficients.get(1);
        double c = coefficients.get(2);

        double discriminant = b * b - 4 * a * c;

        if (discriminant > 0) {
            double solution1 = (-b + Math.sqrt(discriminant)) / (2 * a);
            double solution2 = (-b - Math.sqrt(discriminant)) / (2 * a);
            rishennia.add(solution1);
            rishennia.add(solution2);
        } else if (discriminant == 0) {
            double solution = -b / (2 * a);
            rishennia.add(solution);
        }

        return rishennia;
    }
}

class BiQuadraticRivnianua extends Rivnianua {
    @Override
    public List<Double> solve(List<Double> coefficients) {
        List<Double> rishennia = new ArrayList<>();
        double a = coefficients.get(0);
        double b = coefficients.get(2);
        double c = coefficients.get(4);

        // Solve as quadratic Rivnianua for x^2
        QuadraticRivnianua quadraticRivnianua = new QuadraticRivnianua();
        List<Double> quadraticrishennia = quadraticRivnianua.solve(coefficients.subList(0, 3));

        for (double solution : quadraticrishennia) {
            double value = Math.sqrt(solution);
            rishennia.add(value);
            rishennia.add(-value);
        }

        return rishennia;
    }
}

public class RivnianuaSolver {
    public static void main(String[] args) {
        solveRivnianuasFromFile("input01.txt");
        solveRivnianuasFromFile("input02.txt");
        solveRivnianuasFromFile("input03.txt");
    }

    public static void solveRivnianuasFromFile(String fileName) {
        try {
            File file = new File(fileName);
            Scanner scanner = new Scanner(file);

            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                List<Double> coefficients = parseCoefficients(line);

                Rivnianua Rivnianua;
                if (coefficients.size() == 2) {
                    Rivnianua = new LinearRivnianua();
                } else if (coefficients.size() == 3) {
                    Rivnianua = new QuadraticRivnianua();
                } else {
                    Rivnianua = new BiQuadraticRivnianua();
                }

                List<Double> rishennia = Rivnianua.solve(coefficients);

                System.out.println("Rivnianua: " + line);
                System.out.println("rishennia: " + rishennia);
                System.out.println("Number of rishennia: " + rishennia.size());
                System.out.println();
            }

            scanner.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }

    public static List<Double> parseCoefficients(String line) {
        String[] tokens = line.split(" ");
        List<Double> coefficients = new ArrayList<>();

        for (String token : tokens) {
            coefficients.add(Double.parseDouble(token));
        }

        return coefficients;
    }
}

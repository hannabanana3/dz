import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

// Інтерфейс спостерігача
interface Observer {
    void update(String line);
}

// Конкретний спостерігач для відшукання найдовшого рядка
class LongestLineObserver implements Observer {
    private String longestLine = "";

    @Override
    public void update(String line) {
        if (line.length() > longestLine.length()) {
            longestLine = line;
        }
    }

    public String getLongestLine() {
        return longestLine;
    }
}

// Конкретний спостерігач для відшукання найдовшого слова
class LongestWordObserver implements Observer {
    private String longestWord = "";

    @Override
    public void update(String line) {
        String[] words = line.split("\\s+");
        for (String word : words) {
            if (word.length() > longestWord.length()) {
                longestWord = word;
            }
        }
    }

    public String getLongestWord() {
        return longestWord;
    }
}

// Конкретний спостерігач для підрахунку кількості слів
class WordCountObserver implements Observer {
    private int wordCount = 0;

    @Override
    public void update(String line) {
        String[] words = line.split("\\s+");
        wordCount += words.length;
    }

    public int getWordCount() {
        return wordCount;
    }
}

// Конкретний спостерігач для знаходження рядка, що містить найдовше слово
class LineWithLongestWordObserver implements Observer {
    private String lineWithLongestWord = "";

    @Override
    public void update(String line) {
        String[] words = line.split("\\s+");
        for (String word : words) {
            if (word.length() > lineWithLongestWord.length()) {
                lineWithLongestWord = line;
                break;
            }
        }
    }

    public String getLineWithLongestWord() {
        return lineWithLongestWord;
    }
}

// Суб'єкт (клас для порядкового зчитування файлів)
class TextFileReader {
    private List<Observer> observers;

    public TextFileReader() {
        observers = new ArrayList<>();
    }

    public void registerObserver(Observer observer) {
        observers.add(observer);
    }

    public void removeObserver(Observer observer) {
        observers.remove(observer);
    }

    public void readTextFile(String filePath) {
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = reader.readLine()) != null) {
                notifyObservers(line);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void notifyObservers(String line) {
        for (Observer observer : observers) {
            observer.update(line);
        }
    }
}


